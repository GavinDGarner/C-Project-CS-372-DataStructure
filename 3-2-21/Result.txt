# 21 Number of digits in a number: 4

# 23 Prints a number backwards: 7893

#27 Reverses the contents of the array:
0123456789
9876543210

#28 Prints the Sum of the contents of the array: 45

#29 Prints the location of an element searched for in an array: POS: 7

#33 GCD of two numbers: 96 and 72: 24

Hail Formula using 2 numbers 1779 and 116670. 1779: 148 iterations. 116670: 229 iterations.

SumOver Function Given 4 as input: 1

Createing an array of size 35 recursively:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 

Createing an array of size 35 recursively and filling it with numbers 35 to 1:
35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 

Fill an array of size 19 with values from the middle:
19 17 15 13 11 9 7 5 3 1 2 4 6 8 10 12 14 16 18 Converting a string to an integer number:
17689375 -> 17689375
745433 -> 745433

  Minutes       4 min Distance   Total Distance  
         4               0.730               0.730
         8               0.717               1.460
        12               0.704               2.177
        16               0.691               2.881
        20               0.678               3.572
        24               0.665               4.250
        28               0.652               4.915
        32               0.639               5.567
        36               0.626               6.206
        40               0.613               6.832
        44               0.600               7.445
        48               0.587               8.045
        52               0.574               8.632
        56               0.561               9.206
        60               0.548               9.767
        64               0.535              10.315
        68               0.522              10.850
        72               0.509              11.372
        76               0.496              11.881
        80               0.483              12.377
        84               0.470              12.860
        88               0.457              13.330
        92               0.444              13.787
        96               0.431              14.231
       100               0.418              14.662
       104               0.405              15.080
       108               0.392              15.485
       112               0.379              15.877
       116               0.366              16.256
       120               0.353              16.622
       124               0.340              16.975
       128               0.327              17.315
       132               0.314              17.642
       136               0.301              17.956
       140               0.288              18.257
       144               0.275              18.545
       148               0.262              18.820
       152               0.249              19.082
       156               0.236              19.331
       160               0.223              19.567
       164               0.210              19.790
       168               0.197              20.000
       172               0.184              20.197
       176               0.171              20.381
       180               0.158              20.552
       184               0.145              20.710
       188               0.132              20.855
       192               0.119              20.987
       196               0.106              21.106
       200               0.093              21.212
       204               0.080              21.305
       208               0.067              21.385
       212               0.054              21.452
       216               0.041              21.506
       220               0.028              21.547
       224               0.015              21.575
       228               0.002              21.590


Kissing Triagles:
abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwxyxwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwxwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstutsrqponmlkjihgfedcba
abcdefghijklmnopqrstsrqponmlkjihgfedcba
abcdefghijklmnopqrsrqponmlkjihgfedcba
abcdefghijklmnopqrqponmlkjihgfedcba
abcdefghijklmnopqponmlkjihgfedcba
abcdefghijklmnoponmlkjihgfedcba
abcdefghijklmnonmlkjihgfedcba
abcdefghijklmnmlkjihgfedcba
abcdefghijklmlkjihgfedcba
abcdefghijklkjihgfedcba
abcdefghijkjihgfedcba
abcdefghijihgfedcba
abcdefghihgfedcba
abcdefghgfedcba
abcdefgfedcba
abcdefedcba
abcdedcba
abcdcba
abcba
aba
a

a
aba
abcba
abcdcba
abcdedcba
abcdefedcba
abcdefgfedcba
abcdefghgfedcba
abcdefghihgfedcba
abcdefghijihgfedcba
abcdefghijkjihgfedcba
abcdefghijklkjihgfedcba
abcdefghijklmlkjihgfedcba
abcdefghijklmnmlkjihgfedcba
abcdefghijklmnonmlkjihgfedcba
abcdefghijklmnoponmlkjihgfedcba
abcdefghijklmnopqponmlkjihgfedcba
abcdefghijklmnopqrqponmlkjihgfedcba
abcdefghijklmnopqrsrqponmlkjihgfedcba
abcdefghijklmnopqrstsrqponmlkjihgfedcba
abcdefghijklmnopqrstutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwxwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwxyxwvutsrqponmlkjihgfedcba


Now the other way:

a
aba
abcba
abcdcba
abcdedcba
abcdefedcba
abcdefgfedcba
abcdefghgfedcba
abcdefghihgfedcba
abcdefghijihgfedcba
abcdefghijkjihgfedcba
abcdefghijklkjihgfedcba
abcdefghijklmlkjihgfedcba
abcdefghijklmnmlkjihgfedcba
abcdefghijklmnonmlkjihgfedcba
abcdefghijklmnoponmlkjihgfedcba
abcdefghijklmnopqponmlkjihgfedcba
abcdefghijklmnopqrqponmlkjihgfedcba
abcdefghijklmnopqrsrqponmlkjihgfedcba
abcdefghijklmnopqrstsrqponmlkjihgfedcba
abcdefghijklmnopqrstutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwxwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwxyxwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwxyxwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwxwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvwvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstuvutsrqponmlkjihgfedcba
abcdefghijklmnopqrstutsrqponmlkjihgfedcba
abcdefghijklmnopqrstsrqponmlkjihgfedcba
abcdefghijklmnopqrsrqponmlkjihgfedcba
abcdefghijklmnopqrqponmlkjihgfedcba
abcdefghijklmnopqponmlkjihgfedcba
abcdefghijklmnoponmlkjihgfedcba
abcdefghijklmnonmlkjihgfedcba
abcdefghijklmnmlkjihgfedcba
abcdefghijklmlkjihgfedcba
abcdefghijklkjihgfedcba
abcdefghijkjihgfedcba
abcdefghijihgfedcba
abcdefghihgfedcba
abcdefghgfedcba
abcdefgfedcba
abcdefedcba
abcdedcba
abcdcba
abcba
aba
a




Now for the Tower of Hanoi: 

Sadly I use an online IDE so I cannot maintain a solid internet conection long enough to run the Hanoi function at 100, however lets have some fun guesstimating how long it takes.
Lets assume the computer can perform roughly 10 disk moves per nanosecond (A little rediculous), It would take a computer with that processing power nearly 40,196,936,841,331,464 Centuries to compile the tower fo Hanoi at 100 disks. Yikes
If you made 1 move per second it would take 40,196,936,841,331,472,432,000 years to solve this puzzle.
